<h1>Topologies</h1>


<div class="topologies-left">
  <div class="topologies-list">
    <% if(topologies.length === 0) { %>

    <% if( typeof search != "undefined") { %>
    <p>No result for request '<%- search %>'</p>
    <% } else { %>
    <p>You have no topologies yet, you can <a href="/editor">create a new one in the editor</a>.</p>
    <% } %>

    <% } else { %>
    <table>
      <thead>
      <tr>
        <th width="200">Name</th>
        <th width="70">Visibility</th>
        <th width="70">Status</th>
        <th width="80">Updated</th>
        <th width="40"></th>
      </tr>
      </thead>
      <tbody>
      <%- partial('partials/topologyrow', { collection: topologies }) %>
      </tbody>
    </table>
    <% } %>



  </div>
  <div class="topologies-log">
    <h2>Log</h2>
    <p>
    </p>
  </div>
</div>
<div class="topologies-right">
  <div class="topologies-intro">
    <h2></h2>
    <p></p>
  </div>
  <div id="diagram" class="topologies-diagram">
    <!--<img src="images/map.png">-->
  </div>
</div>

<script>

  var topologies = <%- JSON.stringify(topologies) %>;

  var diagram = $("#diagram");
  var totalWidth = diagram.width();
  var totalHeight = diagram.height();

  var boxWidth = 300;
  var boxHeight = 50;
  var style = "rgba(0, 90, 200, 0.5)";


  var drawTopology = function (ctxt,topology,totalWidth,totalHeight)
  {
    ctxt.strokeStyle= style;
    ctxt.fillStyle= style;
    ctxt.lineWidth=2;
    ctxt.clearRect(0,0, totalWidth, totalHeight);
    var modules = topology.config.modules;
    var xMin = 10000;
    var xMax = 0;
    var yMin = 10000;
    var yMax = 0;
    for (var i=0;i< modules.length;i++)
    {
      var module = modules[i];
      xMin = Math.min(module.config.position[0],xMin);
      xMax = Math.max(module.config.position[0],xMax);
      yMin = Math.min(module.config.position[1],yMin);
      yMax = Math.max(module.config.position[1],yMax);

    }

    var hRatio = (totalWidth)/(xMax+boxWidth+xMin);
    var vRatio = (totalHeight)/(yMax+boxHeight+yMin);

    for (var i=0;i<modules.length;i++)
    {
      drawModule(ctxt,modules[i],hRatio,vRatio);
    }


    var wires = topology.config.wires;

    for (var i=0;i<wires.length;i++)
    {
      var wire = wires[i];
      var src = wire.src.moduleId,
              tgt = wire.tgt.moduleId;

      var srcX = modules[src].config.position[0]+boxWidth/2;
      var srcY = modules[src].config.position[1]+boxHeight;

      var dOut = [0,1];
      var dIn = [0,-1];
      var tgtX = modules[tgt].config.position[0]+boxWidth/2;
      var tgtY = modules[tgt].config.position[1];
      if (modules[src].name=="Global Variable")
      {
          tgtX = modules[tgt].config.position[0];
          tgtY = modules[tgt].config.position[1]+boxHeight/2;
          dIn = [-1,0];
      }

      //Rect
      /*ctxt.beginPath();
      ctxt.moveTo(srcX*hRatio,srcY*vRatio);
      ctxt.lineTo(tgtX*hRatio,tgtY*vRatio);
      ctxt.closePath();
      ctxt.stroke();
      */

      var p1= [srcX*hRatio,srcY*vRatio];
      var p2 = [tgtX*hRatio,tgtY*vRatio];
      // Coefficient multiplicateur de direction
      // 100 par defaut, si distance(p1,p2) < 100, on passe en distance/2
      var coeffMulDirection = 100;


      var distance=Math.sqrt(Math.pow(p1[0]-p2[0],2)+Math.pow(p1[1]-p2[1],2));

      coeffMulDirection = distance/2;

      // Vectores directores d1 et d2 :
      var d1 = [dOut[0]*coeffMulDirection,
        dOut[1]*coeffMulDirection];
      var d2 = [dIn[0]*coeffMulDirection,
        dIn[1]*coeffMulDirection];

      var bezierPoints=[];
      bezierPoints[0] = p1;
      bezierPoints[1] = [p1[0]+d1[0],p1[1]+d1[1]];
      bezierPoints[2] = [p2[0]+d2[0],p2[1]+d2[1]];
      bezierPoints[3] = p2;


      // Draw the inner bezier curve
      ctxt.strokeStyle = style;
      ctxt.beginPath();
      ctxt.moveTo(bezierPoints[0][0],bezierPoints[0][1]);
      ctxt.bezierCurveTo(bezierPoints[1][0],bezierPoints[1][1],bezierPoints[2][0],bezierPoints[2][1],bezierPoints[3][0],bezierPoints[3][1]);
      ctxt.stroke();

    };


  };


  var drawModule = function (ctxt,module,hRatio,vRatio)
  {

    var x = module.config.position[0];
    var y = module.config.position[1];
    var fontSize = 11;
    var grey = "rgba(200, 200, 200, 0.8)";
    ctxt.font = " "+fontSize+"px Helvetica";
    var textWidth = 0;
    if (typeof(ctxt.measureText) != 'undefined')
      textWidth = ctxt.measureText(module.name).width;
    var fontWidth = textWidth+4;
    var width = Math.max(boxWidth*hRatio,fontWidth);
    var height = boxHeight*vRatio;



    ctxt.strokeStyle= grey;
    ctxt.fillStyle= grey;
    ctxt.fillRect(x*hRatio+2, y*vRatio+2, width+2, height+2);
    ctxt.strokeStyle= style;
    ctxt.fillStyle= style;
    ctxt.fillRect(x*hRatio, y*vRatio, width, height);
    ctxt.fillStyle = "white";
    ctxt.fillRect(x*hRatio+1, y*vRatio+1, width-2, fontSize);
    ctxt.fillStyle = "black";
    if (typeof(ctxt.fillText) != 'undefined')
      ctxt.fillText(module.name, x*hRatio+2, y*vRatio+fontSize);
    ctxt.strokeStyle= style;
    ctxt.fillStyle= style;
  };



  var deleteTopology = function(name) {
    var url ='/topologies/'+name+'.json';
    YAHOO.util.Connect.asyncRequest('DELETE', url, {
      success: function(o) {
        $("tr[data-id='"+name+"']").remove();
      },
      failure: function(o) {
        var error = o.status + " " + o.statusText;
        alert("cannot remove" +name);
      }
    });
  }

  $(function(){
    $(".delete-topology").click(function()
    {
      var id = $(this).closest("tr").data("id");
      var name = $(this).data("name");
      var confirmation = confirm("Do you want to remove topology "+name+"?");
      if (confirmation)
      {
        deleteTopology(id);
      }
      return false;
    });


    var element = document.createElement('canvas');

    //IE compatibility
    if (typeof(G_vmlCanvasManager) != 'undefined')
      element = G_vmlCanvasManager.initElement(element);

    var c = $(element);
    c.attr("width",totalWidth);
    c.attr("height",totalHeight);
    diagram.append(c);
    var ctxt = element.getContext("2d");


    $(".topologies-list tbody > tr").click(function()
    {
      var id = $(this).data("id");
      var name = $(this).find("td:first a").html();
      var description = $(this).find("td.description").html();

      $(".topologies-intro h2").html(name);
      $(".topologies-intro p").html(description);

      var newSelection = !$(this).hasClass("selected");

      $(".topologies-list table tr.selected").removeClass("selected");
      $(this).addClass("selected");
      if (newSelection)
      {
        drawTopology(ctxt,topologies[$(this).prevAll().length],totalWidth,totalHeight);
      }

    });

    $(".topologies-list tbody > tr:first").trigger("click");



  });


</script>