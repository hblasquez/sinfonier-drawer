<% var module = template %>
<div style="display:none;" class="terminal terminal-python terminal-<%=module.container.type%>">
  <textarea  class="code-python txt-python-<%=module.container.type%>" cols="120" rows="10" name="source">
<% if (module.sourceCode) {%><%= module.sourceCode %><% } else { %>
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    The MIT License (MIT)

    Copyright (c) <%= (new Date()).getFullYear() %> sinfonier-project

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"""

<% if (module.container.type == "bolt" || module.container.type == "drain") {%>
import basesinfonier<%= module.container.type %>

class <%= className(module.name) %> (basesinfonier<%= module.container.type %>.BaseSinfonier<%= className(module.container.type) %>):
      
    def __init__(self):

        basesinfonierbolt.BaseSinfonierBolt().__init__()

    def userprepare(self):

        # TO-DO: Init values. Code here runs once

        self.variable = "hello"

        # Get Param (get value of "param_name" from input box)
        self.name = self.getParam("param_name")

    def userprocess(self):

        # TO-DO:
        #	Write your code here.
        # 	This code runs once by each input tuple
        # 	You can use the following functions to process it

        # Add field
        self.addField("name","Peter")
        self.addField("name2",self.name)

        # Get field (return a String)
        self.getField("country")

        # Remove field
        self.removeField("age")

        # Exists field (return bool)
        self.existsField("lastname")
        <% if (module.container.type == "bolt") {%>
        # Mandatory: Emit the tuple to the next bolt
        self.emit()
        <% }%>       
<%= className(module.name) %>().run()
<% }%>
<% if (module.container.type == "spout") {%>
import basesinfonierspout
import json

class <%= className(module.name) %>(basesinfonierspout.BaseSinfonierSpout):

    def __init__(self):

        basesinfonierspout.BaseSinfonierSpout().__init__()

    def useropen(self):

        # TO-DO: Init values. Code here runs once.
        # In Spouts this function is very important. Must get an object than can
        # iterate to use it in usernextTuple()

        f = open(self.getParam("file"))
        self.it = iter(f.read().splitlines())
        f.close()

    def usernextTuple(self):

        # TO-DO: Write code here. This code reads an input tuple by each execution
        # You can use the same functions as in the Bolts to process it.
        # Tipically is to use self.addField to build the Tuple to emit.

        try:
            st = self.it.next().split(",")
            self.addField(st[0],st[1])

            self.emit()

        except StopIteration:
            pass

<%= className(module.name) %>().run()
  <% }%>
<% }%>
</textarea>
</div>
